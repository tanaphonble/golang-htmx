// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source=port.go -package=dog -destination=port_mock_test.go
//

// Package dog is a generated GoMock package.
package dog

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDogDatabase is a mock of DogDatabase interface.
type MockDogDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDogDatabaseMockRecorder
}

// MockDogDatabaseMockRecorder is the mock recorder for MockDogDatabase.
type MockDogDatabaseMockRecorder struct {
	mock *MockDogDatabase
}

// NewMockDogDatabase creates a new mock instance.
func NewMockDogDatabase(ctrl *gomock.Controller) *MockDogDatabase {
	mock := &MockDogDatabase{ctrl: ctrl}
	mock.recorder = &MockDogDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDogDatabase) EXPECT() *MockDogDatabaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDogDatabase) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDogDatabaseMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDogDatabase)(nil).Delete), id)
}

// Insert mocks base method.
func (m *MockDogDatabase) Insert(arg0 Dog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDogDatabaseMockRecorder) Insert(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDogDatabase)(nil).Insert), arg0)
}

// SelectAll mocks base method.
func (m *MockDogDatabase) SelectAll() ([]Dog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]Dog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockDogDatabaseMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockDogDatabase)(nil).SelectAll))
}
